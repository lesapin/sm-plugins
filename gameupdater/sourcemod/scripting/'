#pragma semicolon 1

#include <sourcemod>
#include <SteamWorks>

#pragma newdecls required

#define PL_VERSION "0.1.0"

public Plugin myinfo = 
{
    name        = "gameupdater",
    author      = "bzdmn",
    description = "Restart the server when an update is released",
    version     = PL_VERSION,
    url         = "https://mge.me"
};

/*  Check SteamWorks WebAPI for new game updates and
 *  restart the server during the next map change phase. 
 * 
 *  Core functionality is adapted from: 
 *  https://forums.alliedmods.net/showthread.php?p=2331846
 */

enum UpdaterState
{
    Update_NotChecked,
    Update_New,
    Update_NotNew,
};

UpdaterState    g_State         = Update_NotChecked;
int             g_iPatchVersion = 0;

public void OnPluginStart() 
{
    if (!FileExists("steam.inf"))
    {
        SetFailState("Can't find steam.inf");
    }

    g_iPatchVersion = ParseSteamInf("steam.inf");
    LogMessage("PatchVersion %d", g_iPatchVersion);
    LogMessage("%d", VerifyCoreVersion());

    HookEvent("round_end", OnRoundEnd, EventHookMode_Pre);
}

public void OnMapEnd()
{

}

public Action OnRoundEnd(Event event, const char[] name, bool dontBroadcast)
{

    return Plugin_Continue;
}

int ParseSteamInf(const char[] path)
{
    int version = -1;
    
    File file = OpenFile(path, "r");
    if (!file)
    {
        LogError("Can't open %s", path);
        return version;
    }

    char identifier[] = "PatchVersion=";

    while (!file.EndOfFile())
    {
        char line[128];
        if (!file.ReadLine(line, sizeof(line))) 
        {
            break;
        }
        else if (StrContains(line, identifier))
        {
            version = StringToInt(line[sizeof(identifier)]);        
            break;
        }
    }

    file.Close();
    return version;
}
